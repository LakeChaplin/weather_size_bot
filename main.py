import random
import time
import logging
import aiogram
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from datetime import datetime, timedelta
from config import get_bot_token
import asyncio
from aiogram import executor
from aiogram.dispatcher import FSMContext, storage
from aiogram.dispatcher.filters.state import State, StatesGroup


TOKEN = get_bot_token()

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
additional_comments = [
    "–ú–æ–π –º–∏–Ω–∏-–∫—É–∫ - {} —Å–º ü§è",
    "–ú–æ–π –∫—É–∫ –º–µ–Ω—å—à–µ, —á–µ–º —É –∫–µ–Ω–≥—É—Ä—É - {} —Å–º üòÇ",
    "–ú–æ–π –∫—É–∫ –±–æ–ª—å—à–µ, —á–µ–º —É —Å–ª–æ–Ω–∞ - {} —Å–º üò±",
    "–ú–æ–π –∫—É–∫ - {} —Å–º, –º–æ–∏ —Å–æ–±–æ–ª–µ–∑–Ω–æ–≤–∞–Ω–∏—è üôè",
    "–ú–æ–π –∫—É–∫ - {} —Å–º, –Ω–µ –Ω–æ—à—É –±–æ–∫—Å–µ—Ä—ã üòâ",
    "–ú–æ–π –∫—É–∫ - {} —Å–º, –Ω–∞—Å—Ç–æ—è—â–∏–π –º—É–∂–∏–∫ üòé",
    "–ú–æ–π –∫—É–∫ - {} —Å–º, —ç—Ç–æ –∂–µ –Ω–µ –∫–æ–Ω–∫—É—Ä—Å, –ø—Ä–∞–≤–¥–∞? üò¨",
    "–ú–æ–π –∫—É–∫ - {} —Å–º, –Ω–æ –≥–ª–∞–≤–Ω–æ–µ - –∫–∞–∫ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è üòâ",
    "–ú–æ–π –∫—É–∫ - {} —Å–º, –Ω–æ —ç—Ç–æ –Ω–µ –≥–ª–∞–≤–Ω–æ–µ –≤ –∂–∏–∑–Ω–∏ üòå",
    "–ú–æ–π –∫—É–∫ - {} —Å–º, –Ω–æ —ç—Ç–æ –Ω–µ –æ—Ç–º–µ–Ω—è–µ—Ç –º–æ–∏—Ö –¥—Ä—É–≥–∏—Ö –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤ üòè",
    "–ú–æ–π –∫—É–∫ - {} —Å–º, –Ω–æ —ç—Ç–æ –Ω–µ –≤—Å—ë, —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å üòâ",
    "–ú–æ–π –∫—É–∫ - {} —Å–º, —ç—Ç–æ –≤–∞–º –Ω–µ —Ä–∞–∑–º–µ—Ä, –∞ —ç–Ω–µ—Ä–≥–∏—è üí™",
    "–ú–æ–π –∫—É–∫ - {} —Å–º, –Ω–æ —è –º–æ–≥—É —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –ª—é–±—É—é –∂–µ–Ω—â–∏–Ω—É üòò",
    "–ú–æ–π –∫—É–∫ - {} —Å–º, –Ω–æ —É–º–µ–Ω–∏–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å - –≥–ª–∞–≤–Ω–æ–µ üî•",
    "–ú–æ–π –∫—É–∫ - {} —Å–º, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä üòá",
    "–ú–æ–π –∫—É–∫ - {} —Å–º, –Ω–æ —ç—Ç–æ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –º–µ–Ω—è üòú",
    "–ú–æ–π –∫—É–∫ - {} —Å–º, –Ω–æ –¥–ª—è –º–µ–Ω—è –≥–ª–∞–≤–Ω–æ–µ - –¥—É—à–µ–≤–Ω–∞—è —Å–≤—è–∑—å ü§ó",
    "–ú–æ–π –∫—É–∫ - {} —Å–º, –Ω–æ —ç—Ç–æ –Ω–µ –ø–æ–º–µ—à–∞–ª–æ –º–Ω–µ —Å—Ç–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º üòé",
    "–ú–æ–π –∫—É–∫ - {} —Å–º, –Ω–æ —ç—Ç–æ –Ω–µ –ø–æ–º–µ—à–∞–ª–æ –º–Ω–µ –Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç–æ—è—â—É—é –ª—é–±–æ–≤—å ‚ù§Ô∏è",
    "–ú–æ–π –∫—É–∫ - {} —Å–º, –Ω–æ —è –¥—É–º–∞—é, —á—Ç–æ –º—ã –¥–æ–ª–∂–Ω—ã –ª—é–±–∏—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –Ω–µ –∑–∞ —Ä–∞–∑–º–µ—Ä—ã üòä"
    "–ú–æ–π –∫—É–∫ - {} —Å–º, –Ω–æ —è –ª—é–±–ª—é –µ–≥–æ —Ç–∞–∫–∏–º, –∫–∞–∫–æ–π –æ–Ω –µ—Å—Ç—å ‚ù§Ô∏è"
    "–ú–æ–π –∫—É–∫ - {} —Å–º, –Ω–æ —ç—Ç–æ –Ω–µ –≥–ª–∞–≤–Ω–æ–µ –≤ –∂–∏–∑–Ω–∏ üòå"
    "–ú–æ–π –∫—É–∫ - {} —Å–º, –Ω–æ –¥–ª—è –º–µ–Ω—è –≥–ª–∞–≤–Ω–æ–µ - –¥—É—à–µ–≤–Ω–∞—è —Å–≤—è–∑—å ü§ó"
    "–ú–æ–π –∫—É–∫ - {} —Å–º, –Ω–æ —ç—Ç–æ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –º–µ–Ω—è üòú"

]



# –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è Measuring

class Measuring(State):
    def __init__(self):
        self.last_measurement_time = datetime.min



# –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "Share my cook size"
def get_button():
    button = types.InlineKeyboardButton("Share my cook size", callback_data="measure_cook_size")
    keyboard = types.InlineKeyboardMarkup().add(button)
    return keyboard


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(Command("start"))
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'Share my cook size', —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Å–≤–æ–µ–≥–æ –∫—É–∫–∞ :)",
                        reply_markup=get_button())


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "Share my cook size"
@dp.callback_query_handler(lambda call: call.data == 'measure_cook_size')
async def measure_cook_size(call: types.CallbackQuery, state: FSMContext):
    chat_id = call.message.chat.id
    current_time = datetime.now()

    async with state.proxy() as data:
        if 'measurement_state' not in data:
            data['measurement_state'] = Measuring()

        measurement_state = data['measurement_state']

        if measurement_state.last_measurement_time is not None and \
                current_time - measurement_state.last_measurement_time < timedelta(days=1):
            # –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ —Å—É—Ç–æ–∫, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ–Ω —É–∂–µ –∏–∑–º–µ—Ä—è–ª —Å–≤–æ–π –∫—É–∫ –Ω–µ–¥–∞–≤–Ω–æ
            await bot.answer_callback_query(call.id,
                                            "–í—ã —É–∂–µ –∏–∑–º–µ—Ä—è–ª–∏ —Å–≤–æ–π –∫—É–∫ –Ω–µ–¥–∞–≤–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.")
            return

        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –∫—É–∫–∞ –æ—Ç 1 –¥–æ 30 —Å–º
        cook_size = random.randint(1, 30)

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        additional_comment = random.choice(additional_comments)
        await bot.send_message(chat_id=chat_id,
                               text="–í–∞—à –∫—É–∫ - {} —Å–º! {}".format(cook_size, additional_comment.format(cook_size)),
                               reply_markup=types.ReplyKeyboardRemove())

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        measurement_state.last_measurement_time = current_time
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        await state.update_data(data)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

